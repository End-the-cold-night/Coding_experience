You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.




List 注意区分new的方式和下面的方式的区别
 ListNode preHead(0), *p = &preHead;



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry = 0;
        ListNode* pre = new ListNode(0);
        ListNode* head = pre;
        while(l1 || l2 || carry){
            int sum = carry;
            if(l1){
                sum+=l1->val;
                l1 = l1->next;
            }
            if(l2){
                sum+=l2->val;
                l2 = l2->next;
            }
            
            ListNode* now = new ListNode(sum%10);
            pre->next = now;
            carry = sum/10;  
            pre = now;
        }
        if(carry){
            ListNode* now = new ListNode(carry);
            pre->next = now;  
            pre = now;
        }
        pre->next = NULL;
        return head->next;
    }
};
